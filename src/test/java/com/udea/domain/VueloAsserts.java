package com.udea.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class VueloAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVueloAllPropertiesEquals(Vuelo expected, Vuelo actual) {
        assertVueloAutoGeneratedPropertiesEquals(expected, actual);
        assertVueloAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVueloAllUpdatablePropertiesEquals(Vuelo expected, Vuelo actual) {
        assertVueloUpdatableFieldsEquals(expected, actual);
        assertVueloUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVueloAutoGeneratedPropertiesEquals(Vuelo expected, Vuelo actual) {
        assertThat(actual)
            .as("Verify Vuelo auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVueloUpdatableFieldsEquals(Vuelo expected, Vuelo actual) {
        assertThat(actual)
            .as("Verify Vuelo relevant properties")
            .satisfies(a -> assertThat(a.getNumeroVuelo()).as("check numeroVuelo").isEqualTo(expected.getNumeroVuelo()))
            .satisfies(a -> assertThat(a.getOrigen()).as("check origen").isEqualTo(expected.getOrigen()))
            .satisfies(a -> assertThat(a.getDestino()).as("check destino").isEqualTo(expected.getDestino()))
            .satisfies(a -> assertThat(a.getFechaSalida()).as("check fechaSalida").isEqualTo(expected.getFechaSalida()))
            .satisfies(a -> assertThat(a.getFechaLlegada()).as("check fechaLlegada").isEqualTo(expected.getFechaLlegada()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVueloUpdatableRelationshipsEquals(Vuelo expected, Vuelo actual) {
        // empty method
    }
}
